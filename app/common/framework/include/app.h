/*
 * SPDX-License-Identifier: BSD-3-Clause
 * SPDX-FileCopyrightText: Copyright TF-RMM Contributors.
 */

#ifndef APP_H
#define APP_H

#include <app_fw_structures.h>

#define APP_VA_START	(UL(0xffffffffffffffff) - XLAT_HIGH_VA_SIZE + 1U)

#ifndef __ASSEMBLER__
#include <stddef.h>
#include <stdint.h>
#include <string.h>

/* exit_flag bits */
/* An SVC call issued with APP_EXIT_CALL as ISS */
#define APP_EXIT_SVC_EXIT_FLAG		(UL(1) << 0)
/* An SVC call issued with APP_YIELD_CALL as ISS */
#define APP_EXIT_SVC_YIELD_FLAG		(UL(1) << 1)
/* An SVC call issued with APP_SERVICE_CALL as ISS */
#define APP_EXIT_SVC_SERVICE_FLAG	(UL(1) << 2)

/* TODO: This should come from a header that is generated by the bin generating python script
 * or by cmake? A template could be used... See
 * https://cmake.org/cmake/help/latest/command/configure_file.html
 */
#define RMM_RANDOM_APP_ID			(103U)
#define ATTESTATION_APP_ID			(211U)
#define RMM_DEV_ASSIGN_APP_ID			(110U)

#define GRANULE_COUNT(size)	(round_up(size, GRANULE_SIZE) / GRANULE_SIZE)

#ifdef APP_FW_LOGGING
#define LOG_APP_FW INFO
#else
#define LOG_APP_FW VERBOSE
#endif

/*
 * Function to set up the App framework. Called once, during cold boot.
 */
void app_framework_setup(void);

/*
 * Function to calculate the number of per instance granules that are used by
 * this app.
 *
 * Arguments:
 *	- app_id: The ID of the application.
 *
 * Return:
 *	- The number of granules required by the app.
 */
size_t app_get_required_granule_count(unsigned long app_id);

/*
 * Initialise the config data for an App instance.
 *
 * Arguments:
 *	- app_data: Pointer to the config to be initialised
 *	- app_id: The id of the app to be initialised
 *	- granule_pas: An array of Granule PAS that can be used for per instance
 *        data in the app
 *	- granule_count: The number of elements in the granule_pas array.
 *	- granule_va_start: The start address of the granules as they are mapped
 *        in RMM core
 *
 * Return:
 *	- 0 on success or a negative POSIX error otherwise.
 *
 * Important: some RMM apps might use the optimisation so that the RMM app stub
 * (running in EL2) access the RMM app heap directly (i.e. the pages are mapped
 * in the RMM core VA space). If the app uses this optimisation then the pages
 * passed in granule_pas must be mapped continuously either in the REC AUX pages
 * or in the RMM core's RW memory area.
 * TODO: The current API assumes that the condition above is true, and
 * granule_va_start contains the start address of the area where the PAs in the
 * array are mapped.
 */
int app_init_data(struct app_data_cfg *app_data,
		      unsigned long app_id,
		      uintptr_t granule_pas[],
		      size_t granule_count,
		      void *granule_va_start);

void *app_get_heap_ptr(struct app_data_cfg *app_data);

/*
 * Run the app instance execution specified by the app data config. This
 * function can only be called if the app is not pre-empted/yieded. This
 * function loads the app register context, populated the arguments,
 * runs the app, and returns to the caller if the app finished running
 * by calling an SVC or caused an exception.
 *
 * Arguments:
 *	- app_data: An initialised app config (selects the app instance to run)
 *	- app_func_id: The id of the function in the app to be run
 *	- arg0 - arg3: Arguments to the app function
 *
 * Return:
 *	- App specific return value and is only valid if `app_data->exit_flag`
 *	  != APP_EXIT_SVC_YIELD_FLAG.
 */
unsigned long app_run(struct app_data_cfg *app_data,
			  unsigned long app_func_id,
			  unsigned long arg0,
			  unsigned long arg1,
			  unsigned long arg2,
			  unsigned long arg3);

/*
 * Resume the app instance specified by the app data config previously
 * yielded/premepted. This function loads the saved app register context,
 * runs the app, and returns to the caller if the app finished running
 * by calling an SVC or caused an exception.
 *
 * Arguments:
 *	- app_data: An initialised app config (selects the app instance to run)
 * Return:
 *	- App specific return value and is only valid if `app_data->exit_flag`
 *	  != APP_EXIT_SVC_YIELD_FLAG.
 */
unsigned long app_resume(struct app_data_cfg *app_data);

/*
 * Abort an application instance by resetting its register context its init
 * value. This resets the stack pointer and the PC. General purpose register
 * values, stack, heap, and data/bss memory content is not affected.
 *
 * Arguments:
 *	- app_data: An initialised app config (selects the app instance to abort)
 */
void app_abort(struct app_data_cfg *app_data);

/*
 * Map the app shared page in the EL2 VA space
 *
 * Arguments:
 *	- app_data: An initialised app config
 */
void app_map_shared_page(struct app_data_cfg *app_data);

/*
 * Unmap the app shared page from the EL2 VA space
 *
 * Arguments:
 *	- app_data: An initialised app config
 */
void app_unmap_shared_page(struct app_data_cfg *app_data);

#endif /* __ASSEMBLER__ */
#endif /* APP_H */
