#
# SPDX-License-Identifier: BSD-3-Clause
# SPDX-FileCopyrightText: Copyright TF-RMM Contributors.
#

%YAML 1.2
---
description: >-
  This Config Brings together a software stack to test RMM and Arm RME extension
  utilizing TF-A-Tests. The main Test payload in TF-A-Tests is the TFTF
  binary. In this config, TF-A is in Root World, TF-RMM is in Realm EL2 and
  TFTF is in Normal World.

  The Config pulls TF-A and TFTF repositories to the Shrinkwrap working
  directory (defined through the environment variable ${SHRINKWRAP_BUILD})
  whilst using the local RMM repository to build specified through the
  btvar ${RMM_SRC}.

  In order to build TF-RMM with TF-A and TFTF you can invoke the following
  command:

  .. code-block:: shell

    shrinkwrap build --btvar=RMM_SRC=${PWD} rmm-tftf.yaml --no-sync=rmm

  The command above assumes that shrinkwrap is called from the root directory
  of your local TF-RMM installation and that ${SHRINKWRAP_CONFIG} has been setup
  to point to the configs directory in TF-RMM:

  .. code-block:: shell

    export SHRINKWRAP_CONFIG=${PWD}/tools/shrinkwrap/configs

  Note that when building, shrinkwrap will, by default, reset all your repositories,
  including your local copy of TF-RMM, to their master/main branches, which
  will cause you to lose any uncommited changes. It is therefore recommended,
  specially for incremental builds, to always use the ``--no-sync=rmm`` or
  ``no-sync-all`` options when building to avoid reseting the repositories.

  Once built, you can run your configuration as follows:

  .. code-block:: shell

    shrinkwrap run rmm-tftf.yaml

  If you need to build and run your software stack using your installed native
  toolchain and model in your host machine, you can do it so by passing
  --runtime=null to the command line when building and running. Otherwise,
  Shrinkwrap will download and use the default Docker image containing the
  the toolchain and FVP. Ensure that the relevant toolchains and FVP are
  present in the PATH variable.

  In order to clean your workspace, which is recommended when trying to test
  different configurations, you need to invoke the clean command on Shrinkwrap:

  .. code-block:: shell

    shrinkwrap clean rmm-tftf.yaml --overlay=${PWD}/tools/shrinkwrap/common/layers/clean.yaml

  Note that currently, Shrinkwrap has the limitation that it needs to have a
  non-null path for all repositories in order to be able to clean a given
  configuration, even if such path is incorrect and/or not needed for the
  cleaning process.

  This config allows to tune some of the build and run options by the use of
  btvar and rtvars respectively. Specifically, it can define the SHA/Branch of
  the TFTF repository used for the tests by specifying the ``TFTF_REVISION``
  btvar, which by default points to the ``master`` branch. It also allows
  to enable Cache Modelling on the FVP model by setting the
  ``CACHE_MODEL_ENABLED`` rtvar, which by default is ``0`` (disabled).

layers:
  - tftf-base.yaml
  - tfa-rme.yaml
  - rmm.yaml

concrete: true

buildex:
  btvars:
    # Determines the branch or SHA to pull for TFTF
    TFTF_REVISION:
      type: string
      value: master

build:
  tftf:
    repo:
      revision: ${btvar:TFTF_REVISION}
    params:
      TESTS: realm-payload # Include only relevant tests for RMM/RME
      ENABLE_REALM_PAYLOAD_TESTS: 1

  tfa:
    params:
      BL33: ${artifact:TFTF_BIN}
      ENABLE_FEAT_D128: 2

run:
  rtvars:
    CACHE_MODEL_ENABLED:
      type: string
      value: 0

  params:
    -C bp.secureflashloader.fname: ${artifact:BL1}
    -C bp.flashloader0.fname: ${artifact:FIP}

    # Enable FEAT_DoubleFault2
    -C cluster0.has_ras_armv89_double_fault: 2
    -C cluster1.has_ras_armv89_double_fault: 2

    # Cache modelling settings
    -C cache_state_modelled: ${rtvar:CACHE_MODEL_ENABLED}

    # Enable DA related parameters on RootPort0: (0:1.0)
    -C pci.pcie_rc.rootport0.ide_supported: 1
    -C pci.pcie_rc.rootport0.tee_io_supported: 1
    -C pci.pcie_rc.rootport0.rmeda_dvsec_enable: 1
    -C pci.pcie_rc.rootport0.acs_supported: 1

    # Enable DA related parameters on RootPort1: (0:2.0)
    -C pci.pcie_rc.rootport1.ide_supported: 1
    -C pci.pcie_rc.rootport1.tee_io_supported: 1
    -C pci.pcie_rc.rootport1.rmeda_dvsec_enable: 1
    -C pci.pcie_rc.rootport1.acs_supported: 1

    # Enable DA related parameters on RootPort2: (0:3.0)
    -C pci.pcie_rc.rootport2.ide_supported: 1
    -C pci.pcie_rc.rootport2.tee_io_supported: 1
    -C pci.pcie_rc.rootport2.rmeda_dvsec_enable: 1
    -C pci.pcie_rc.rootport2.acs_supported: 1

    # Enable DA related parameters on RootPort3: (0:4.0)
    -C pci.pcie_rc.rootport3.ide_supported: 1
    -C pci.pcie_rc.rootport3.tee_io_supported: 1
    -C pci.pcie_rc.rootport3.rmeda_dvsec_enable: 1
    -C pci.pcie_rc.rootport3.acs_supported: 1

    # Enable DA related parameters on off-chip device: (1:0.0)
    -C pci.pcie_rc.ahci1.endpoint.doe_supported: 1
    -C pci.pcie_rc.ahci1.endpoint.ide_supported: 1
    -C pci.pcie_rc.ahci1.endpoint.tee_io_supported: 1
    -C pci.pcie_rc.ahci1.endpoint.bit_mask_of_base_asym_alg: 16
    -C pci.pcie_rc.ahci1.endpoint.certificate_der_filename: ${btvar:RMM_SRC}/ext/libspdm/unit_test/sample_key/ecp256/bundle_responder.certchain.der
    -C pci.pcie_rc.ahci1.endpoint.private_key_filename: ${btvar:RMM_SRC}/ext/libspdm/unit_test/sample_key/ecp256/end_responder.key

    # Enable DA related parameters on off-chip device: (2:0.0)
    -C pci.pcie_rc.smmuv3testengine2.endpoint.doe_supported: 1
    -C pci.pcie_rc.smmuv3testengine2.endpoint.ide_supported: 1
    -C pci.pcie_rc.smmuv3testengine2.endpoint.tee_io_supported: 1
    -C pci.pcie_rc.smmuv3testengine2.endpoint.bit_mask_of_base_asym_alg: 128
    -C pci.pcie_rc.smmuv3testengine2.endpoint.certificate_der_filename: ${btvar:RMM_SRC}/ext/libspdm/unit_test/sample_key/ecp384/bundle_responder.certchain.der
    -C pci.pcie_rc.smmuv3testengine2.endpoint.private_key_filename: ${btvar:RMM_SRC}/ext/libspdm/unit_test/sample_key/ecp384/end_responder.key

    # Enable DA related parameters on off-chip device: (5:0.0)
    -C pci.pcie_rc.ahci2.endpoint.doe_supported: 1
    -C pci.pcie_rc.ahci2.endpoint.ide_supported: 1
    -C pci.pcie_rc.ahci2.endpoint.tee_io_supported: 1
    -C pci.pcie_rc.ahci2.endpoint.bit_mask_of_base_asym_alg: 4
    -C pci.pcie_rc.ahci2.endpoint.certificate_der_filename: ${btvar:RMM_SRC}/ext/libspdm/unit_test/sample_key/rsa3072/bundle_responder.certchain.der
    -C pci.pcie_rc.ahci2.endpoint.private_key_filename: ${btvar:RMM_SRC}/ext/libspdm/unit_test/sample_key/rsa3072/end_responder.key

  terminals:
    bp.terminal_0:
      friendly: TF-A
    bp.terminal_3:
      friendly: RMM
